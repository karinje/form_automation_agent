Here the set of steps you need to follow:
1. The json file is structured such that dependencies store which elements get revealed/hidden based on particular values for various elements. Dependencies are recursive. Parse the json file to figure out which inputs will trigger the maximum number of dependencies to be revealed (because we want to test an input that touches most elements). 

2. Then figure out the input values to be provided in the yaml file that will reveal the most elements (provide names of input that reasonably match the json based on text phrase/parents text phrase/element name). 

3. The create a yaml file in  yaml_files folder with inputs that accomplish 2. 

4. **Reuse page_name and field names and field structures etc.. from data/input/ds160_add_group.yaml wherever possible. For yaml file name, mapping file name and llm prompt file name (instructions below), use the same name as the page name in the json file. 

4. Next create a correponding mapping file in mapping_files folder such that elements are mapped consistently between yaml file and mapping file. 
This mapping should include every single form field element in the json file. Generate a yaml to json field mapping for every field, not just the path that reveals that most element. So this will be more fields that what is the the yaml obviously. 
Since we need superset of fields to provide as inpu to llm call, since we dont kno which path the user will take, we need to provide all fields. 
You can use form_mapping in form_mapping.py as a template for the mapping file. 

5. if a field has a has_na_checkbox set to true, then provide an input in yaml that has the fields with _na and set to false. 
5. In the yaml file, provides instructions as comments on how to fill the yaml field. The comments should be included on the same line to the right of the fields so that fields are on consecutive lines.
This should include  what is the json text correponding to the yaml fields and what are all the allowed values etc. This will serve as instruction to the llm call to fill the yaml fields. 

6. In the mapping file and the yaml input file, include all fields that are in the json even if they dont fall on teh path currently chosen. We want to create superset of fields that can be fed to llm prompt in case the path is different from user. 

7. Follow these naming conventions strictly:
   - In YAML: Use page_name format (e.g., personal_page1, travel_page) and use page names exactly from from this sample json file @data/input/ds160_add_group.yaml
   - For date fields, always split into separate month/day/year fields:
     YAML example: arrival_month: "JUN", arrival_day: "15", arrival_year: "2024"
     Not: arrival_date: "2024-06-15"
   - In form_mapping, do NOT use page name as prefix:
     Correct: "purpose_of_trip": "field_id"
     Wrong: "page_name.purpose_of_trip": "field_id"
   - In YAML, put page fields under the page type:
     Correct:
       page_name:
         field1: "value"
         field2: "value"
     Wrong:
       page_name:
         page_name:
           field1: "value"
   - Keep nested structure flat in form_mapping.py using dots:
     Correct: "parent.child": "field_id"
     Wrong: "parent": { "child": "field_id" }
   - For phone numbers, remove all spaces and hyphens:
     Correct: "442012345678"
     Wrong: "+44-20-1234-5678"
   - For location/address fields, always include city, state/province, and country when present in the JSON:
     Correct:
       issuance_location:
         city: "London"
         state: "Greater London"
         country: "UNITED KINGDOM"
     Wrong:
       issuance_location:
         city: "London"
         country: "UNITED KINGDOM"

6. Once completed, review each input step by step for consistency between all files.

7. Don't make any other unnecessary changes; provide full code snippets don't truncate with ...etc... 

Files to consider: 
@data/input/ds160_add_group.yaml @form_mapping.py and provided input json.

Folders to consider: 
@yaml_files @mapping_files 